require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe StockaudititemsController do

  def mock_stockaudititem(stubs={})
    @mock_stockaudititem ||= mock_model(Stockaudititem, stubs).as_null_object
  end

  before (:each) do
    @user = Factory.create(:user)
    sign_in @user
  end
  
  describe "GET index" do
    it "assigns all stockaudititems as @stockaudititems" do
      Stockaudititem.stub(:all) { [mock_stockaudititem] }
      get :index
      assigns(:stockaudititems).should eq([mock_stockaudititem])
    end
  end

  describe "GET show" do
    it "assigns the requested stockaudititem as @stockaudititem" do
      Stockaudititem.stub(:find).with("37") { mock_stockaudititem }
      get :show, :id => "37"
      assigns(:stockaudititem).should be(mock_stockaudititem)
    end
  end

  describe "GET new" do
    it "assigns a new stockaudititem as @stockaudititem" do
      Stockaudititem.stub(:new) { mock_stockaudititem }
      get :new
      assigns(:stockaudititem).should be(mock_stockaudititem)
    end
  end

  describe "GET edit" do
    it "assigns the requested stockaudititem as @stockaudititem" do
      Stockaudititem.stub(:find).with("37") { mock_stockaudititem }
      get :edit, :id => "37"
      assigns(:stockaudititem).should be(mock_stockaudititem)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created stockaudititem as @stockaudititem" do
        Stockaudititem.stub(:new).with({'these' => 'params'}) { mock_stockaudititem(:save => true) }
        post :create, :stockaudititem => {'these' => 'params'}
        assigns(:stockaudititem).should be(mock_stockaudititem)
      end

      it "redirects to the created stockaudititem" do
        Stockaudititem.stub(:new) { mock_stockaudititem(:save => true) }
        post :create, :stockaudititem => {}
        response.should redirect_to(stockaudititem_url(mock_stockaudititem))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved stockaudititem as @stockaudititem" do
        Stockaudititem.stub(:new).with({'these' => 'params'}) { mock_stockaudititem(:save => false) }
        post :create, :stockaudititem => {'these' => 'params'}
        assigns(:stockaudititem).should be(mock_stockaudititem)
      end

      it "re-renders the 'new' template" do
        Stockaudititem.stub(:new) { mock_stockaudititem(:save => false) }
        post :create, :stockaudititem => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested stockaudititem" do
        Stockaudititem.stub(:find).with("37") { mock_stockaudititem }
        mock_stockaudititem.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :stockaudititem => {'these' => 'params'}
      end

      it "assigns the requested stockaudititem as @stockaudititem" do
        Stockaudititem.stub(:find) { mock_stockaudititem(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:stockaudititem).should be(mock_stockaudititem)
      end

      it "redirects to the stockaudititem" do
        Stockaudititem.stub(:find) { mock_stockaudititem(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(stockaudititem_url(mock_stockaudititem))
      end
    end

    describe "with invalid params" do
      it "assigns the stockaudititem as @stockaudititem" do
        Stockaudititem.stub(:find) { mock_stockaudititem(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:stockaudititem).should be(mock_stockaudititem)
      end

      it "re-renders the 'edit' template" do
        Stockaudititem.stub(:find) { mock_stockaudititem(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested stockaudititem" do
      Stockaudititem.stub(:find).with("37") { mock_stockaudititem }
      mock_stockaudititem.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the stockaudititems list" do
      Stockaudititem.stub(:find) { mock_stockaudititem }
      delete :destroy, :id => "1"
      response.should redirect_to(stockaudititems_url)
    end
  end

end
